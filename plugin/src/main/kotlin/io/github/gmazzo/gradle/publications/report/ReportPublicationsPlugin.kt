/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.github.gmazzo.gradle.publications.report

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.publish.maven.tasks.AbstractPublishToMaven
import org.gradle.api.publish.maven.tasks.PublishToMavenLocal
import org.gradle.api.publish.maven.tasks.PublishToMavenRepository
import org.gradle.kotlin.dsl.register
import org.gradle.kotlin.dsl.setProperty
import org.gradle.kotlin.dsl.withType
import java.util.TreeMap
import java.util.TreeSet

class ReportPublicationsPlugin : Plugin<Project> {

    override fun apply(project: Project): Unit = with(project) {
        val publishTasks = objects.setProperty<AbstractPublishToMaven>()

        allprojects {
            tasks.withType<AbstractPublishToMaven>().configureEach {
                publishTasks.add(this)
            }
        }

        tasks.register<ReportPublicationsTask>("reportPublications") {
            notCompatibleWithConfigurationCache("not meant to be cached")
            mustRunAfter(publishTasks)
            publications.value(publishTasks.map(::collectPublications)).disallowChanges()
        }
    }

    private fun collectPublications(publishTasks: Set<AbstractPublishToMaven>): Map<ReportPublication.Repository, Set<ReportPublication>> {
        val publications =
            TreeMap<ReportPublication.Repository, TreeSet<ReportPublication>>(compareBy(ReportPublication.Repository::value))
        val publicationsComparator =
            compareBy(ReportPublication::group, ReportPublication::artifact, ReportPublication::version)

        publishTasks.forEach { task ->
            val publication = ReportPublication(
                group = task.publication.groupId,
                artifact = task.publication.artifactId,
                version = task.publication.version,
                repository = when (task) {
                    is PublishToMavenLocal -> ReportPublication.Repository(name = "mavenLocal", value = "~/.m2/repository")
                    is PublishToMavenRepository -> ReportPublication.Repository(name = task.repository.name, task.repository.url.toString())
                    else -> ReportPublication.Repository(name = "<unknown>", value = "")
                },
                outcome = when {
                    task.state.didWork -> ReportPublication.Outcome.Published
                    task.state.failure != null -> ReportPublication.Outcome.Failed
                    task.state.skipped || task.state.executed -> ReportPublication.Outcome.Skipped
                    else -> ReportPublication.Outcome.Unknown
                }
            )

            publications.compute(publication.repository) { _, set ->
                (set ?: TreeSet(publicationsComparator)).apply { add(publication) }
            }
        }
        return publications
    }

}
